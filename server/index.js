const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const { createServer } = require('http');
const { Server } = require('socket.io');
require('dotenv').config();

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors());
app.use(express.json());

// Initialize Telegram Bot with error handling
let bot = null;
let botStatus = 'disconnected';

try {
  if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_BOT_TOKEN.length > 20) {
    bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
    botStatus = 'connected';
    console.log('ü§ñ Telegram Bot initialized successfully');
  } else {
    console.log('‚ö†Ô∏è  Invalid Telegram Bot Token. Bot will run in demo mode.');
    botStatus = 'demo';
  }
} catch (error) {
  console.log('‚ùå Failed to initialize Telegram Bot:', error.message);
  botStatus = 'error';
}

// Initialize OpenAI
let openai = null;
let openaiStatus = 'disconnected';

try {
  if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.length > 20) {
    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    openaiStatus = 'connected';
    console.log('üß† OpenAI initialized successfully');
  } else {
    console.log('‚ö†Ô∏è  Invalid OpenAI API Key. AI features will be limited.');
    openaiStatus = 'demo';
  }
} catch (error) {
  console.log('‚ùå Failed to initialize OpenAI:', error.message);
  openaiStatus = 'error';
}

// Global state
let counterValue = 0;
let achievements = {
  firstClick: { name: "–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫", description: "–°–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫", earned: false },
  tenClicks: { name: "–î–µ—Å—è—Ç–∫–∞", description: "–î–æ—Å—Ç–∏–≥–ª–∏ 10 –∫–ª–∏–∫–æ–≤", earned: false },
  hundredClicks: { name: "–°–æ—Ç–Ω—è", description: "–î–æ—Å—Ç–∏–≥–ª–∏ 100 –∫–ª–∏–∫–æ–≤", earned: false },
  telegramUser: { name: "–¢–µ–ª–µ–≥—Ä–∞–º–º–µ—Ä", description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Telegram –±–æ—Ç–∞", earned: false },
  aiChatter: { name: "–ò–ò –ß–∞—Ç—Ç–µ—Ä", description: "–ü–æ–æ–±—â–∞–ª–∏—Å—å —Å –ò–ò", earned: false }
};

// Socket.IO connection handling
io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);
  
  // Send current state to new client
  socket.emit('counterUpdate', counterValue);
  socket.emit('achievementsUpdate', achievements);
  socket.emit('botStatusUpdate', { bot: botStatus, openai: openaiStatus });
  
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

// Counter API endpoints
app.get('/api/counter', (req, res) => {
  res.json({ value: counterValue });
});

app.post('/api/counter/increment', (req, res) => {
  counterValue++;
  checkAchievements();
  io.emit('counterUpdate', counterValue);
  io.emit('achievementsUpdate', achievements);
  res.json({ value: counterValue });
});

app.post('/api/counter/decrement', (req, res) => {
  counterValue--;
  checkAchievements();
  io.emit('counterUpdate', counterValue);
  io.emit('achievementsUpdate', achievements);
  res.json({ value: counterValue });
});

app.get('/api/achievements', (req, res) => {
  res.json(achievements);
});

app.get('/api/status', (req, res) => {
  res.json({ 
    bot: botStatus, 
    openai: openaiStatus,
    counter: counterValue,
    achievements: Object.values(achievements).filter(a => a.earned).length
  });
});

// Achievement checking function
function checkAchievements() {
  if (counterValue === 1 && !achievements.firstClick.earned) {
    achievements.firstClick.earned = true;
    console.log('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫');
  }
  
  if (counterValue >= 10 && !achievements.tenClicks.earned) {
    achievements.tenClicks.earned = true;
    console.log('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –î–µ—Å—è—Ç–∫–∞');
  }
  
  if (counterValue >= 100 && !achievements.hundredClicks.earned) {
    achievements.hundredClicks.earned = true;
    console.log('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –°–æ—Ç–Ω—è');
  }
}

// Telegram Bot Commands (only if bot is connected)
if (bot && botStatus === 'connected') {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `
üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MCP Project Bot!*

–Ø —É–º–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å —Å—á–µ—Ç—á–∏–∫–æ–º –∏ –æ–±—â–∞—Ç—å—Å—è —Å –ò–ò!

*–ß—Ç–æ —è —É–º–µ—é:*
‚Ä¢ üìä –£–ø—Ä–∞–≤–ª—è—Ç—å —Å—á–µ—Ç—á–∏–∫–æ–º (—É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å/—É–º–µ–Ω—å—à–∞—Ç—å)
‚Ä¢ ü§ñ –û–±—â–∞—Ç—å—Å—è —Å –ò–ò —á–µ—Ä–µ–∑ OpenAI
‚Ä¢ üèÜ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –≤–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
‚Ä¢ üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/counter - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
/increment - –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
/decrement - –£–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
/chat - –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ò–ò
/achievements - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤

*–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫:* ${counterValue}

üí° *–°–æ–≤–µ—Ç:* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /chat –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò!
    `;
    
    bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/counter/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞: *${counterValue}*`, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/increment/, (msg) => {
    const chatId = msg.chat.id;
    counterValue++;
    checkAchievements();
    io.emit('counterUpdate', counterValue);
    io.emit('achievementsUpdate', achievements);
    
    // Unlock Telegram user achievement
    if (!achievements.telegramUser.earned) {
      achievements.telegramUser.earned = true;
      io.emit('achievementsUpdate', achievements);
    }
    
    bot.sendMessage(chatId, `‚ûï –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω! –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *${counterValue}*`, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/decrement/, (msg) => {
    const chatId = msg.chat.id;
    counterValue--;
    checkAchievements();
    io.emit('counterUpdate', counterValue);
    io.emit('achievementsUpdate', achievements);
    
    // Unlock Telegram user achievement
    if (!achievements.telegramUser.earned) {
      achievements.telegramUser.earned = true;
      io.emit('achievementsUpdate', achievements);
    }
    
    bot.sendMessage(chatId, `‚ûñ –°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω! –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *${counterValue}*`, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/achievements/, (msg) => {
    const chatId = msg.chat.id;
    let achievementsText = 'üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n';
    
    Object.entries(achievements).forEach(([key, achievement]) => {
      const status = achievement.earned ? '‚úÖ' : '‚ùå';
      achievementsText += `${status} *${achievement.name}*: ${achievement.description}\n`;
    });
    
    const earnedCount = Object.values(achievements).filter(a => a.earned).length;
    achievementsText += `\n*–ü—Ä–æ–≥—Ä–µ—Å—Å:* ${earnedCount}/${Object.keys(achievements).length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`;
    
    bot.sendMessage(chatId, achievementsText, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

/counter - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
/increment - –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
/decrement - –£–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
/chat - –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ò–ò
/achievements - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° *–°–æ–≤–µ—Ç:* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /chat –¥–ª—è –æ–±—â–µ–Ω–∏—è —Å –ò–ò!

üåê *–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:* http://localhost:3000
    `;
    
    bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/status/, (msg) => {
    const chatId = msg.chat.id;
    const statusMessage = `
üìä *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:*

ü§ñ Telegram Bot: ${botStatus === 'connected' ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞'}
üß† OpenAI: ${openaiStatus === 'connected' ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞'}
üìà –°—á–µ—Ç—á–∏–∫: ${counterValue}
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${Object.values(achievements).filter(a => a.earned).length}/${Object.keys(achievements).length}

üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:3000
    `;
    
    bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
  });

  // AI Chat functionality
  bot.onText(/\/chat/, async (msg) => {
    const chatId = msg.chat.id;
    if (openaiStatus === 'connected') {
      bot.sendMessage(chatId, 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!');
    } else {
      bot.sendMessage(chatId, '‚ùå –ò–ò —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API.');
    }
  });

  // Handle AI chat messages
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // Skip bot commands
    if (text.startsWith('/')) return;
    
    // Skip if it's not a chat message (like /chat command)
    if (text === 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –æ—Ç–≤–µ—á—É!') return;
    
    if (openaiStatus !== 'connected') {
      bot.sendMessage(chatId, '‚ùå –ò–ò —Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ OpenAI API.');
      return;
    }
    
    try {
      // Unlock AI chatter achievement
      if (!achievements.aiChatter.earned) {
        achievements.aiChatter.earned = true;
        io.emit('achievementsUpdate', achievements);
      }
      
      bot.sendMessage(chatId, 'ü§î –î—É–º–∞—é...');
      
      const completion = await openai.chat.completions.create({
        model: "gpt-3.5-turbo",
        messages: [
          {
            role: "system",
            content: "–¢—ã –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π –ò–ò –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ-—Ä—É—Å—Å–∫–∏. –¢—ã –ø–æ–º–æ–≥–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å –ø—Ä–æ–µ–∫—Ç–æ–º MCP."
          },
          {
            role: "user",
            content: text
          }
        ],
        max_tokens: 150
      });
      
      const aiResponse = completion.choices[0].message.content;
      bot.sendMessage(chatId, aiResponse);
      
    } catch (error) {
      console.error('OpenAI API Error:', error);
      bot.sendMessage(chatId, 'üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.');
    }
  });

  // Error handling
  bot.on('error', (error) => {
    console.error('Telegram Bot Error:', error);
    botStatus = 'error';
    io.emit('botStatusUpdate', { bot: botStatus, openai: openaiStatus });
  });

  bot.on('polling_error', (error) => {
    console.error('Telegram Bot Polling Error:', error);
    botStatus = 'error';
    io.emit('botStatusUpdate', { bot: botStatus, openai: openaiStatus });
  });
} else {
  console.log('ü§ñ Telegram Bot is not available. Running in demo mode.');
}

// Start server
const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`ü§ñ Telegram Bot status: ${botStatus}`);
  console.log(`üß† OpenAI status: ${openaiStatus}`);
  console.log(`üîå WebSocket server ready`);
  console.log(`üåê Frontend: http://localhost:3000`);
  console.log(`üîß Backend API: http://localhost:${PORT}`);
  
  if (botStatus !== 'connected') {
    console.log(`‚ö†Ô∏è  To enable Telegram Bot, get a valid token from @BotFather`);
    console.log(`‚ö†Ô∏è  To enable OpenAI, add a valid API key to .env file`);
  }
});
