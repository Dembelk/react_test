const express = require('express');
const cors = require('cors');
const TelegramBot = require('node-telegram-bot-api');
const OpenAI = require('openai');
const { createServer } = require('http');
const { Server } = require('socket.io');
require('dotenv').config();

const app = express();
const server = createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://localhost:3000",
    methods: ["GET", "POST"]
  }
});

// Middleware
app.use(cors());
app.use(express.json());

// Initialize Telegram Bot with error handling
let bot = null;
let botStatus = 'disconnected';

try {
  if (process.env.TELEGRAM_BOT_TOKEN && process.env.TELEGRAM_BOT_TOKEN.length > 20) {
    bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN, { polling: true });
    botStatus = 'connected';
    console.log('ü§ñ Telegram Bot initialized successfully');
  } else {
    console.log('‚ö†Ô∏è  Invalid Telegram Bot Token. Bot will run in demo mode.');
    botStatus = 'demo';
  }
} catch (error) {
  console.log('‚ùå Failed to initialize Telegram Bot:', error.message);
  botStatus = 'error';
}

// Initialize OpenAI
let openai = null;
let openaiStatus = 'disconnected';

try {
  if (process.env.OPENAI_API_KEY && process.env.OPENAI_API_KEY.length > 20) {
    openai = new OpenAI({
      apiKey: process.env.OPENAI_API_KEY,
    });
    openaiStatus = 'connected';
    console.log('üß† OpenAI initialized successfully');
  } else {
    console.log('‚ö†Ô∏è  Invalid OpenAI API Key. AI features will be limited.');
    openaiStatus = 'demo';
  }
} catch (error) {
  console.log('‚ùå Failed to initialize OpenAI:', error.message);
  openaiStatus = 'error';
}

// Initialize Tavily (using direct HTTP requests)
let tavilyStatus = 'disconnected';

if (process.env.TAVILY_API_KEY && process.env.TAVILY_API_KEY.length > 20) {
  tavilyStatus = 'connected';
  console.log('üîç Tavily Search initialized successfully');
} else {
  console.log('‚ö†Ô∏è  Invalid Tavily API Key. Search features will be limited.');
  tavilyStatus = 'demo';
}

// Tavily search function using fetch
async function tavilySearch(query, options = {}) {
  const response = await fetch('https://api.tavily.com/search', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${process.env.TAVILY_API_KEY}`
    },
    body: JSON.stringify({
      query: query,
      search_depth: options.searchDepth || 'advanced',
      max_results: options.maxResults || 10,
      include_answer: options.includeAnswer || true,
      include_raw_content: options.includeRawContent || false,
      include_images: options.includeImages || false,
      include_domains: options.includeDomains || [],
      exclude_domains: options.excludeDomains || [],
      search_type: options.searchType || 'basic'
    })
  });
  
  if (!response.ok) {
    throw new Error(`Tavily API error: ${response.status}`);
  }
  
  return await response.json();
}

// Global state
let counterValue = 0;
let achievements = {
  firstClick: { name: "–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫", description: "–°–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫", earned: false },
  tenClicks: { name: "–î–µ—Å—è—Ç–∫–∞", description: "–î–æ—Å—Ç–∏–≥–ª–∏ 10 –∫–ª–∏–∫–æ–≤", earned: false },
  hundredClicks: { name: "–°–æ—Ç–Ω—è", description: "–î–æ—Å—Ç–∏–≥–ª–∏ 100 –∫–ª–∏–∫–æ–≤", earned: false },
  telegramUser: { name: "–¢–µ–ª–µ–≥—Ä–∞–º–º–µ—Ä", description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Telegram –±–æ—Ç–∞", earned: false },
  aiChatter: { name: "–ò–ò –ß–∞—Ç—Ç–µ—Ä", description: "–ü–æ–æ–±—â–∞–ª–∏—Å—å —Å –ò–ò", earned: false },
  webSearcher: { name: "–í–µ–±-–ø–æ–∏—Å–∫–æ–≤–∏–∫", description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ", earned: false }
};

// Socket.IO connection handling
io.on('connection', (socket) => {
  console.log('Client connected:', socket.id);
  
  // Send current state to new client
  socket.emit('counterUpdate', counterValue);
  socket.emit('achievementsUpdate', achievements);
  socket.emit('botStatusUpdate', { bot: botStatus, openai: openaiStatus, tavily: tavilyStatus });
  
  socket.on('disconnect', () => {
    console.log('Client disconnected:', socket.id);
  });
});

// Counter API endpoints
app.get('/api/counter', (req, res) => {
  res.json({ value: counterValue });
});

app.post('/api/counter/increment', (req, res) => {
  counterValue++;
  checkAchievements();
  io.emit('counterUpdate', counterValue);
  io.emit('achievementsUpdate', achievements);
  res.json({ value: counterValue });
});

app.post('/api/counter/decrement', (req, res) => {
  counterValue--;
  checkAchievements();
  io.emit('counterUpdate', counterValue);
  io.emit('achievementsUpdate', achievements);
  res.json({ value: counterValue });
});

app.get('/api/achievements', (req, res) => {
  res.json(achievements);
});

app.get('/api/status', (req, res) => {
  res.json({ 
    bot: botStatus, 
    openai: openaiStatus,
    tavily: tavilyStatus,
    counter: counterValue,
    achievements: Object.values(achievements).filter(a => a.earned).length
  });
});

// Search API endpoints
app.post('/api/search', async (req, res) => {
  const { query, type = 'search' } = req.body;
  
  if (!query) {
    return res.status(400).json({ error: 'Query is required' });
  }
  
  if (tavilyStatus !== 'connected') {
    return res.status(503).json({ error: 'Search service unavailable', status: tavilyStatus });
  }
  
  try {
    let searchOptions = {
      searchDepth: 'advanced',
      maxResults: 10,
      includeAnswer: true
    };
    
    if (type === 'news') {
      searchOptions.searchType = 'news';
      searchOptions.includeDomains = ['reuters.com', 'bbc.com', 'cnn.com', 'techcrunch.com'];
    }
    
    if (type === 'reddit') {
      searchOptions.includeDomains = ['reddit.com'];
      searchOptions.searchDepth = 'advanced';
    }
    
    console.log('Searching with options:', { query, ...searchOptions });
    const result = await tavilySearch(query, searchOptions);
    
    // Unlock web searcher achievement
    if (!achievements.webSearcher.earned) {
      achievements.webSearcher.earned = true;
      io.emit('achievementsUpdate', achievements);
    }
    
    res.json(result);
  } catch (error) {
    console.error('Tavily Search Error:', error);
    res.status(500).json({ error: 'Search failed', details: error.message });
  }
});

// Achievement checking function
function checkAchievements() {
  if (counterValue === 1 && !achievements.firstClick.earned) {
    achievements.firstClick.earned = true;
    console.log('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –ü–µ—Ä–≤—ã–π –∫–ª–∏–∫');
  }
  
  if (counterValue >= 10 && !achievements.tenClicks.earned) {
    achievements.tenClicks.earned = true;
    console.log('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –î–µ—Å—è—Ç–∫–∞');
  }
  
  if (counterValue >= 100 && !achievements.hundredClicks.earned) {
    achievements.hundredClicks.earned = true;
    console.log('üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏–µ —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ: –°–æ—Ç–Ω—è');
  }
}

// Helper function to format search results
function formatSearchResults(results, type = 'search') {
  if (!results || !results.results) {
    return '‚ùå –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.';
  }
  
  let formatted = `üîç *–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:*\n\n`;
  
  if (type === 'news') {
    formatted = `ÔøΩÔøΩ *–ù–æ–≤–æ—Å—Ç–∏:*\n\n`;
  } else if (type === 'reddit') {
    formatted = `ü§ñ *Reddit:*\n\n`;
  }
  
  // Add answer if available
  if (results.answer) {
    formatted += `üí° *–ö—Ä–∞—Ç–∫–∏–π –æ—Ç–≤–µ—Ç:* ${results.answer}\n\n`;
  }
  
  results.results.slice(0, 5).forEach((result, index) => {
    const title = result.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è';
    const content = result.content ? result.content.substring(0, 200) + '...' : '–û–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
    const url = result.url || '#';
    const score = result.score ? ` (—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: ${Math.round(result.score * 100)}%)` : '';
    
    formatted += `${index + 1}. *${title}*${score}\n`;
    formatted += `${content}\n`;
    formatted += `[–ü–æ–¥—Ä–æ–±–Ω–µ–µ](${url})\n\n`;
  });
  
  if (results.results.length > 5) {
    formatted += `... –∏ –µ—â–µ ${results.results.length - 5} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤`;
  }
  
  return formatted;
}

// Enhanced AI chat with search integration
async function enhancedAIChat(userMessage, searchResults = null) {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∫–∞–∫ 22 –∞–≤–≥—É—Å—Ç–∞ 2025
  const currentDate = "2025-08-22";
  
  let systemPrompt = `–¢—ã –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –≥–ª—É–±–æ–∫–∏–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–±–ª–∞—Å—Ç—è—Ö. 

–í–ê–ñ–ù–û: –°–µ–≥–æ–¥–Ω—è 22 –∞–≤–≥—É—Å—Ç–∞ 2025 –≥–æ–¥–∞. –¢–≤–æ–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–æ–≥—É—Ç –±—ã—Ç—å —É—Å—Ç–∞—Ä–µ–≤—à–∏–º–∏.

–¢–≤–æ–∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
- –í–°–ï–ì–î–ê –æ—Ç–≤–µ—á–∞–π –Ω–∞ –†–£–°–°–ö–û–ú —è–∑—ã–∫–µ
- –û—Ç–≤–µ—á–∞–π –ø–æ–¥—Ä–æ–±–Ω–æ –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ
- –ò—Å–ø–æ–ª—å–∑—É–π –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –Ω–∞ ${currentDate}
- –ï—Å–ª–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Å—Ç–∞—Ä–µ–ª–∞, –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–π —ç—Ç–æ –∏ –¥–∞—Ç—É –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
- –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä—É–π –æ—Ç–≤–µ—Ç—ã —Å –ø–æ–º–æ—â—å—é –º–∞—Ä–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–ø–∏—Å–∫–æ–≤
- –ü—Ä–∏–≤–æ–¥–∏ –ø—Ä–∏–º–µ—Ä—ã –∏ –ø—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
- –ë—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
- –ü—Ä–∏ –ø–æ–∏—Å–∫–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ —É–∫–∞–∑—ã–≤–∞–π, —á—Ç–æ –¥–∞–Ω–Ω—ã–µ –º–æ–≥—É—Ç –±—ã—Ç—å –Ω–µ —Å–∞–º—ã–º–∏ —Å–≤–µ–∂–∏–º–∏

–ï—Å–ª–∏ —Ç–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞, –∏—Å–ø–æ–ª—å–∑—É–π –∏—Ö –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞, –Ω–æ –Ω–µ –æ–≥—Ä–∞–Ω–∏—á–∏–≤–∞–π—Å—è —Ç–æ–ª—å–∫–æ –∏–º–∏.`;

  let messages = [
    { role: "system", content: systemPrompt }
  ];

  if (searchResults && searchResults.results) {
    const searchContext = `–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É "${userMessage}":\n\n` + 
      searchResults.results.slice(0, 3).map((r, i) => 
        `${i + 1}. ${r.title}\n${r.content.substring(0, 300)}...`
      ).join('\n\n');
    
    messages.push({ role: "user", content: `–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø–æ–∏—Å–∫–∞:\n${searchContext}\n\n–í–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userMessage}` });
  } else {
    messages.push({ role: "user", content: userMessage });
  }

  try {
    const completion = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: messages,
      max_tokens: 2000,
      temperature: 0.7,
      timeout: 30000 // 30 —Å–µ–∫—É–Ω–¥ —Ç–∞–π–º–∞—É—Ç
    });

    return completion.choices[0].message.content;
  } catch (error) {
    console.error('OpenAI API Error Details:', error);
    
    // –ï—Å–ª–∏ OpenAI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
    if (searchResults && searchResults.results) {
      return formatSearchResults(searchResults, 'search');
    } else {
      return `ü§ñ –ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–æ —É –º–µ–Ω—è –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ –ò–ò. 

üí° *–°–æ–≤–µ—Ç:* –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞:
‚Ä¢ /search "–≤–∞—à –∑–∞–ø—Ä–æ—Å" - –¥–ª—è –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
‚Ä¢ /news "—Ç–µ–º–∞" - –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ /reddit "–∑–∞–ø—Ä–æ—Å" - –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ Reddit

–≠—Ç–∏ –∫–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç –ò–ò –∏ –¥–∞–¥—É—Ç –≤–∞–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.`;
    }
  }
}

// Telegram Bot Commands (only if bot is connected)
if (bot && botStatus === 'connected') {
  bot.onText(/\/start/, async (msg) => {
    const chatId = msg.chat.id;
    const welcomeMessage = `
üöÄ *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ MCP Project Bot!*

–Ø –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º–∏ –ø–æ–∏—Å–∫–∞ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–æ–º.

*–ú–æ–∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:*
‚Ä¢ üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–æ–º (—É–≤–µ–ª–∏—á–∏–≤–∞—Ç—å/—É–º–µ–Ω—å—à–∞—Ç—å)
‚Ä¢ ü§ñ –£–º–Ω—ã–π —á–∞—Ç —Å GPT-4.1-mini (–¥–æ 2000 —Ç–æ–∫–µ–Ω–æ–≤)
‚Ä¢ üîç –ü–æ–∏—Å–∫ –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
‚Ä¢ üì∞ –ü–æ–∏—Å–∫ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ ü§ñ –ü–æ–∏—Å–∫ –ø–æ Reddit
‚Ä¢ üèÜ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π
‚Ä¢ üîÑ –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/counter - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
/increment - –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
/decrement - –£–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
/chat - –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ò–ò
/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
/news <—Ç–µ–º–∞> - –ü–æ–∏—Å–∫ –Ω–æ–≤–æ—Å—Ç–µ–π
/reddit <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø–æ Reddit
/achievements - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

*–¢–µ–∫—É—â–∏–π —Å—á–µ—Ç—á–∏–∫:* ${counterValue}

üí° *–ü—Ä–∏–º–µ—Ä—ã:*
/search "–ª—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã 2024"
/news "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
/reddit "programming tips"
/chat "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ AI"
    `;
    
    bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown', disable_web_page_preview: true });
  });

  bot.onText(/\/counter/, (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `üìä –¢–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞: *${counterValue}*`, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/increment/, (msg) => {
    const chatId = msg.chat.id;
    counterValue++;
    checkAchievements();
    io.emit('counterUpdate', counterValue);
    io.emit('achievementsUpdate', achievements);
    
    // Unlock Telegram user achievement
    if (!achievements.telegramUser.earned) {
      achievements.telegramUser.earned = true;
      io.emit('achievementsUpdate', achievements);
    }
    
    bot.sendMessage(chatId, `‚ûï –°—á–µ—Ç—á–∏–∫ —É–≤–µ–ª–∏—á–µ–Ω! –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *${counterValue}*`, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/decrement/, (msg) => {
    const chatId = msg.chat.id;
    counterValue--;
    checkAchievements();
    io.emit('counterUpdate', counterValue);
    io.emit('achievementsUpdate', achievements);
    
    // Unlock Telegram user achievement
    if (!achievements.telegramUser.earned) {
      achievements.telegramUser.earned = true;
      io.emit('achievementsUpdate', achievements);
    }
    
    bot.sendMessage(chatId, `‚ûñ –°—á–µ—Ç—á–∏–∫ —É–º–µ–Ω—å—à–µ–Ω! –ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ: *${counterValue}*`, { parse_mode: 'Markdown' });
  });

  // Enhanced search command
  bot.onText(/\/search (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const query = match[1];
    
    if (tavilyStatus !== 'connected') {
      bot.sendMessage(chatId, `‚ùå –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–ª—É–∂–±–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ${tavilyStatus}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tavily API.`);
      return;
    }
    
    bot.sendMessage(chatId, `üîç –ò—â—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ: *${query}*...`, { parse_mode: 'Markdown' });
    
    try {
      const result = await tavilySearch(query, {
        searchDepth: 'advanced',
        maxResults: 10,
        includeAnswer: true
      });
      
      // Unlock web searcher achievement
      if (!achievements.webSearcher.earned) {
        achievements.webSearcher.earned = true;
        io.emit('achievementsUpdate', achievements);
      }
      
      const formattedResults = formatSearchResults(result, 'search');
      bot.sendMessage(chatId, formattedResults, { parse_mode: 'Markdown', disable_web_page_preview: true });
      
    } catch (error) {
      console.error('Search Error:', error);
      bot.sendMessage(chatId, `üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: ${error.message}`);
    }
  });

  // News command
  bot.onText(/\/news (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const query = match[1];
    
    if (tavilyStatus !== 'connected') {
      bot.sendMessage(chatId, `‚ùå –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–ª—É–∂–±–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ${tavilyStatus}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tavily API.`);
      return;
    }
    
    bot.sendMessage(chatId, `üì∞ –ò—â—É —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ: *${query}*...`, { parse_mode: 'Markdown' });
    
    try {
      const result = await tavilySearch(query, {
        searchDepth: 'advanced',
        maxResults: 10,
        includeAnswer: true,
        searchType: 'news',
        includeDomains: ['reuters.com', 'bbc.com', 'cnn.com', 'techcrunch.com', 'theverge.com']
      });
      
      // Unlock web searcher achievement
      if (!achievements.webSearcher.earned) {
        achievements.webSearcher.earned = true;
        io.emit('achievementsUpdate', achievements);
      }
      
      const formattedResults = formatSearchResults(result, 'news');
      bot.sendMessage(chatId, formattedResults, { parse_mode: 'Markdown', disable_web_page_preview: true });
      
    } catch (error) {
      console.error('News Search Error:', error);
      bot.sendMessage(chatId, `üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –Ω–æ–≤–æ—Å—Ç–µ–π: ${error.message}`);
    }
  });

  // Reddit command
  bot.onText(/\/reddit (.+)/, async (msg, match) => {
    const chatId = msg.chat.id;
    const query = match[1];
    
    if (tavilyStatus !== 'connected') {
      bot.sendMessage(chatId, `‚ùå –ü–æ–∏—Å–∫–æ–≤–∞—è —Å–ª—É–∂–±–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (—Å—Ç–∞—Ç—É—Å: ${tavilyStatus}). –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Tavily API.`);
      return;
    }
    
    bot.sendMessage(chatId, `ü§ñ –ò—â—É –ø–æ—Å—Ç—ã –Ω–∞ Reddit –æ: *${query}*...`, { parse_mode: 'Markdown' });
    
    try {
      const result = await tavilySearch(query, {
        searchDepth: 'advanced',
        maxResults: 10,
        includeAnswer: true,
        includeDomains: ['reddit.com']
      });
      
      // Unlock web searcher achievement
      if (!achievements.webSearcher.earned) {
        achievements.webSearcher.earned = true;
        io.emit('achievementsUpdate', achievements);
      }
      
      const formattedResults = formatSearchResults(result, 'reddit');
      bot.sendMessage(chatId, formattedResults, { parse_mode: 'Markdown', disable_web_page_preview: true });
      
    } catch (error) {
      console.error('Reddit Search Error:', error);
      bot.sendMessage(chatId, `üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ Reddit: ${error.message}`);
    }
  });

  bot.onText(/\/achievements/, (msg) => {
    const chatId = msg.chat.id;
    let achievementsText = 'üèÜ *–í–∞—à–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è:*\n\n';
    
    Object.entries(achievements).forEach(([key, achievement]) => {
      const status = achievement.earned ? '‚úÖ' : '‚ùå';
      achievementsText += `${status} *${achievement.name}*: ${achievement.description}\n`;
    });
    
    const earnedCount = Object.values(achievements).filter(a => a.earned).length;
    achievementsText += `\n*–ü—Ä–æ–≥—Ä–µ—Å—Å:* ${earnedCount}/${Object.keys(achievements).length} –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π`;
    
    bot.sendMessage(chatId, achievementsText, { parse_mode: 'Markdown' });
  });

  bot.onText(/\/help/, (msg) => {
    const chatId = msg.chat.id;
    const helpMessage = `
ü§ñ *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*

/counter - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
/increment - –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
/decrement - –£–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫
/chat - –ù–∞—á–∞—Ç—å —á–∞—Ç —Å –ò–ò (GPT-4.1-mini)
/search <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –≤ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–µ
/news <—Ç–µ–º–∞> - –ü–æ–∏—Å–∫ —Å–≤–µ–∂–∏—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
/reddit <–∑–∞–ø—Ä–æ—Å> - –ü–æ–∏—Å–∫ –ø–æ Reddit
/achievements - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
/status - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

üí° *–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:*
/search "–ª—É—á—à–∏–µ —Ñ–∏–ª—å–º—ã 2024"
/news "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"
/reddit "programming tips"
/chat "—Ä–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ AI"

üåê *–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:* http://localhost:3000
    `;
    
    bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown', disable_web_page_preview: true });
  });

  bot.onText(/\/status/, (msg) => {
    const chatId = msg.chat.id;
    const statusMessage = `
üìä *–°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:*

ü§ñ Telegram Bot: ${botStatus === 'connected' ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞'}
üß† OpenAI (GPT-4.1-mini): ${openaiStatus === 'connected' ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞'}
üîç Tavily Search: ${tavilyStatus === 'connected' ? '‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω' : '‚ùå –û—à–∏–±–∫–∞'}
üìà –°—á–µ—Ç—á–∏–∫: ${counterValue}
üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${Object.values(achievements).filter(a => a.earned).length}/${Object.keys(achievements).length}

üåê –í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: http://localhost:3000
    `;
    
    bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' });
  });

  // Enhanced AI Chat functionality
  bot.onText(/\/chat/, async (msg) => {
    const chatId = msg.chat.id;
    bot.sendMessage(chatId, `ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å GPT-4.1-mini.

üìÖ *–°–µ–≥–æ–¥–Ω—è:* 22 –∞–≤–≥—É—Å—Ç–∞ 2025 –≥–æ–¥–∞
üåê *–Ø–∑—ã–∫:* –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ä—É—Å—Å–∫–æ–º
üîç *–ü–æ–∏—Å–∫:* –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∏—â—É –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é

–ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!

üí° *–ü—Ä–∏–º–µ—Ä—ã:*
‚Ä¢ "–†–∞—Å—Å–∫–∞–∂–∏ –æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ç—Ä–µ–Ω–¥–∞—Ö –≤ AI"
‚Ä¢ "–ù–∞–π–¥–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è—Ö"
‚Ä¢ "–ö–∞–∫–∏–µ –ª—É—á—à–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏ –ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤ 2025?"`, { parse_mode: 'Markdown' });
  });

  // Handle AI chat messages with search integration
  bot.on('message', async (msg) => {
    const chatId = msg.chat.id;
    const text = msg.text;
    
    // Skip bot commands
    if (text.startsWith('/')) return;
    
    // Skip if it's not a chat message
    if (text === 'ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å GPT-4.1-mini. –ù–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ —á—Ç–æ-–Ω–∏–±—É–¥—å, –∏ —è –¥–∞–º –ø–æ–¥—Ä–æ–±–Ω—ã–π –∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!') return;
    
    try {
      // Unlock AI chatter achievement
      if (!achievements.aiChatter.earned) {
        achievements.aiChatter.earned = true;
        io.emit('achievementsUpdate', achievements);
      }
      
      bot.sendMessage(chatId, 'ü§î –ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –∏ –≥–æ—Ç–æ–≤–ª—é –ø–æ–¥—Ä–æ–±–Ω—ã–π –æ—Ç–≤–µ—Ç...');
      
      // Check if we should search for additional context
      let searchResults = null;
      if (tavilyStatus === 'connected' && (text.includes('–Ω–æ–≤–æ—Å—Ç–∏') || text.includes('–ø–æ—Å–ª–µ–¥–Ω–∏–µ') || text.includes('–∞–∫—Ç—É–∞–ª—å–Ω—ã–µ') || text.includes('—Ç—Ä–µ–Ω–¥—ã') || text.includes('–ø–æ—Å—Ç–æ–≤'))) {
        try {
          searchResults = await tavilySearch(text, {
            searchDepth: 'advanced',
            maxResults: 10,
            includeAnswer: true
          });
        } catch (searchError) {
          console.log('Search failed, continuing with AI only:', searchError.message);
        }
      }
      
      const aiResponse = await enhancedAIChat(text, searchResults);
      bot.sendMessage(chatId, aiResponse, { parse_mode: 'Markdown' });
      
    } catch (error) {
      console.error('Message Processing Error:', error);
      
      // –ü—ã—Ç–∞–µ–º—Å—è –¥–∞—Ç—å –ø–æ–ª–µ–∑–Ω—ã–π –æ—Ç–≤–µ—Ç –¥–∞–∂–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ
      let fallbackMessage = 'üòî –ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è.';
      
      if (tavilyStatus === 'connected') {
        fallbackMessage += '\n\nüí° *–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –ø–æ–∏—Å–∫–∞:*\n‚Ä¢ /search "–≤–∞—à –∑–∞–ø—Ä–æ—Å"\n‚Ä¢ /news "—Ç–µ–º–∞"\n‚Ä¢ /reddit "–∑–∞–ø—Ä–æ—Å"';
      }
      
      bot.sendMessage(chatId, fallbackMessage, { parse_mode: 'Markdown' });
    }
  });

  // Error handling
  bot.on('error', (error) => {
    console.error('Telegram Bot Error:', error);
    botStatus = 'error';
    io.emit('botStatusUpdate', { bot: botStatus, openai: openaiStatus, tavily: tavilyStatus });
  });

  bot.on('polling_error', (error) => {
    console.error('Telegram Bot Polling Error:', error);
    botStatus = 'error';
    io.emit('botStatusUpdate', { bot: botStatus, openai: openaiStatus, tavily: tavilyStatus });
  });
} else {
  console.log('ü§ñ Telegram Bot is not available. Running in demo mode.');
}

// Start server
const PORT = process.env.PORT || 3001;
server.listen(PORT, () => {
  console.log(`üöÄ Server running on port ${PORT}`);
  console.log(`ü§ñ Telegram Bot status: ${botStatus}`);
  console.log(`üß† OpenAI status: ${openaiStatus}`);
  console.log(`üîç Tavily Search status: ${tavilyStatus}`);
  console.log(`üîå WebSocket server ready`);
  console.log(`üåê Frontend: http://localhost:3000`);
  console.log(`üîß Backend API: http://localhost:${PORT}`);
  
  if (botStatus !== 'connected') {
    console.log(`‚ö†Ô∏è  To enable Telegram Bot, get a valid token from @BotFather`);
  }
  if (openaiStatus !== 'connected') {
    console.log(`‚ö†Ô∏è  To enable OpenAI, add a valid API key to .env file`);
  }
  if (tavilyStatus !== 'connected') {
    console.log(`‚ö†Ô∏è  To enable Tavily Search, add a valid API key to .env file`);
  }
});
