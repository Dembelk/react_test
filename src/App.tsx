import { useState, useEffect } from 'react'
import { io, Socket } from 'socket.io-client'
import './App.css'

interface Achievement {
  name: string;
  description: string;
  earned: boolean;
}

interface Achievements {
  firstClick: Achievement;
  tenClicks: Achievement;
  hundredClicks: Achievement;
  telegramUser: Achievement;
  aiChatter: Achievement;
}

function App() {
  const [count, setCount] = useState(0)
  const [socket, setSocket] = useState<Socket | null>(null)
  const [achievements, setAchievements] = useState<Achievements>({
    firstClick: { name: "–ü–µ—Ä–≤—ã–π –∫–ª–∏–∫", description: "–°–¥–µ–ª–∞–ª–∏ –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫", earned: false },
    tenClicks: { name: "–î–µ—Å—è—Ç–∫–∞", description: "–î–æ—Å—Ç–∏–≥–ª–∏ 10 –∫–ª–∏–∫–æ–≤", earned: false },
    hundredClicks: { name: "–°–æ—Ç–Ω—è", description: "–î–æ—Å—Ç–∏–≥–ª–∏ 100 –∫–ª–∏–∫–æ–≤", earned: false },
    telegramUser: { name: "–¢–µ–ª–µ–≥—Ä–∞–º–º–µ—Ä", description: "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ Telegram –±–æ—Ç–∞", earned: false },
    aiChatter: { name: "–ò–ò –ß–∞—Ç—Ç–µ—Ä", description: "–ü–æ–æ–±—â–∞–ª–∏—Å—å —Å –ò–ò", earned: false }
  })
  const [showAchievements, setShowAchievements] = useState(false)
  const [newAchievement, setNewAchievement] = useState<string | null>(null)

  useEffect(() => {
    // Connect to WebSocket
    const newSocket = io('http://localhost:3001')
    setSocket(newSocket)

    // Listen for counter updates
    newSocket.on('counterUpdate', (value: number) => {
      setCount(value)
    })

    // Listen for achievements updates
    newSocket.on('achievementsUpdate', (newAchievements: Achievements) => {
      setAchievements(newAchievements)
      
      // Check for new achievements
      Object.entries(newAchievements).forEach(([key, achievement]) => {
        if (achievement.earned && !achievements[key as keyof Achievements].earned) {
          setNewAchievement(achievement.name)
          setTimeout(() => setNewAchievement(null), 3000)
        }
      })
    })

    return () => {
      newSocket.close()
    }
  }, [])

  const incrementCounter = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/counter/increment', {
        method: 'POST'
      })
      const data = await response.json()
      setCount(data.value)
    } catch (error) {
      console.error('Error incrementing counter:', error)
    }
  }

  const decrementCounter = async () => {
    try {
      const response = await fetch('http://localhost:3001/api/counter/decrement', {
        method: 'POST'
      })
      const data = await response.json()
      setCount(data.value)
    } catch (error) {
      console.error('Error decrementing counter:', error)
    }
  }

  const earnedAchievementsCount = Object.values(achievements).filter(a => a.earned).length
  const totalAchievementsCount = Object.keys(achievements).length

  return (
    <div className="app">
      {/* New Achievement Notification */}
      {newAchievement && (
        <div className="achievement-notification">
          <div className="achievement-content">
            <span className="achievement-icon">üèÜ</span>
            <div className="achievement-text">
              <h3>–ù–æ–≤–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!</h3>
              <p>{newAchievement}</p>
            </div>
          </div>
        </div>
      )}

      <header className="app-header">
        <h1>üöÄ –ù–æ–≤—ã–π MCP –ü—Ä–æ–µ–∫—Ç</h1>
        <p>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–µ React –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å Telegram –±–æ—Ç–æ–º –∏ –ò–ò!</p>
      </header>
      
      <main className="app-main">
        <div className="card">
          <h2>–°—á–µ—Ç—á–∏–∫</h2>
          <div className="counter">
            <button 
              onClick={decrementCounter}
              className="counter-btn"
            >
              -
            </button>
            <span className="counter-value">{count}</span>
            <button 
              onClick={incrementCounter}
              className="counter-btn"
            >
              +
            </button>
          </div>
          <p className="counter-text">
            –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –∑–Ω–∞—á–µ–Ω–∏—è
          </p>
        </div>

        {/* Achievements Section */}
        <div className="achievements-section">
          <div className="achievements-header">
            <h2>üèÜ –î–æ—Å—Ç–∏–∂–µ–Ω–∏—è</h2>
            <button 
              className="toggle-btn"
              onClick={() => setShowAchievements(!showAchievements)}
            >
              {showAchievements ? '–°–∫—Ä—ã—Ç—å' : '–ü–æ–∫–∞–∑–∞—Ç—å'} ({earnedAchievementsCount}/{totalAchievementsCount})
            </button>
          </div>
          
          {showAchievements && (
            <div className="achievements-grid">
              {Object.entries(achievements).map(([key, achievement]) => (
                <div 
                  key={key} 
                  className={`achievement-card ${achievement.earned ? 'earned' : 'locked'}`}
                >
                  <div className="achievement-icon">
                    {achievement.earned ? 'üèÜ' : 'üîí'}
                  </div>
                  <div className="achievement-info">
                    <h3>{achievement.name}</h3>
                    <p>{achievement.description}</p>
                  </div>
                </div>
              ))}
            </div>
          )}
        </div>

        <div className="features">
          <h2>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞</h2>
          <ul>
            <li>‚úÖ React 18 —Å TypeScript</li>
            <li>‚úÖ Vite –¥–ª—è –±—ã—Å—Ç—Ä–æ–π —Å–±–æ—Ä–∫–∏</li>
            <li>‚úÖ Telegram Bot –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è</li>
            <li>‚úÖ –ò–ò —á–∞—Ç —Å OpenAI</li>
            <li>‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π</li>
            <li>‚úÖ Real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è</li>
            <li>‚úÖ –°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π CSS</li>
          </ul>
        </div>

        <div className="telegram-info">
          <h2>ü§ñ Telegram Bot</h2>
          <p>–ù–∞–π–¥–∏—Ç–µ –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞ –≤ Telegram –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:</p>
          <div className="bot-commands">
            <code>/start</code> - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º<br/>
            <code>/counter</code> - –ü–æ–∫–∞–∑–∞—Ç—å —Å—á–µ—Ç—á–∏–∫<br/>
            <code>/increment</code> - –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫<br/>
            <code>/decrement</code> - –£–º–µ–Ω—å—à–∏—Ç—å —Å—á–µ—Ç—á–∏–∫<br/>
            <code>/chat</code> - –ß–∞—Ç —Å –ò–ò<br/>
            <code>/achievements</code> - –ü–æ–∫–∞–∑–∞—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
          </div>
        </div>
      </main>

      <footer className="app-footer">
        <p>–°–æ–∑–¥–∞–Ω–æ —Å ‚ù§Ô∏è –∏—Å–ø–æ–ª—å–∑—É—è —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏</p>
      </footer>
    </div>
  )
}

export default App
